{"version":3,"sources":["Components/Jumbo.js","Components/Employee.js","App.js","serviceWorker.js","index.js"],"names":["Jumbo","Jumbotron","className","fluid","Container","Employee","useState","items","setItems","setFirstName","setLastName","setAge","useEffect","fetch","then","res","json","result","results","handleFirstChange","sort","a","b","name","first","Table","striped","bordered","hover","variant","Button","size","onClick","active","block","last","male","filter","gen","gender","female","dob","age","map","item","key","length","src","picture","thumbnail","alt","location","city","state","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2083232.chunk.js","sourcesContent":["import React from 'react';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\nimport '../App.css';\r\n\r\n\r\nfunction Jumbo() {\r\n\r\n    return (\r\n        <>\r\n            <Jumbotron className=\"JumboB\" fluid>\r\n                <Container>\r\n                    <h1>Employee Directory</h1>\r\n                    <p>\r\n                        This is a directory of your employees that can be sorted or filtered.\r\n                    </p>\r\n                </Container>\r\n            </Jumbotron>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Jumbo;","import React, { useState, useEffect } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport '../App.css';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\n\r\n\r\nfunction Employee() {\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [firstName, setFirstName] = useState();\r\n    const [lastName, setLastName] = useState();\r\n    const [age, setAge] = useState();\r\n    const [gender, setGender] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://randomuser.me/api/?results=50\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setItems(result.results);\r\n                   \r\n                },\r\n            )\r\n    }, []);\r\n\r\n    const handleFirstChange = () => {\r\n        setFirstName(items.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1))\r\n    };\r\n\r\n    const handleLastChange = () => {\r\n        setLastName(items.sort((a, b) => (a.name.last > b.name.last) ? 1 : -1))\r\n    };\r\n    const handleAgeChange = () => {\r\n        setAge(items.sort((a, b) => (a.dob.age > b.dob.age) ? 1 : -1))\r\n    };\r\n\r\n    const handleMaleChange = () => {\r\n        const male = items.filter(gen => gen.gender === \"male\");\r\n        setItems(male)\r\n    };\r\n    const handleFemaleChange = () => {\r\n        const female = items.filter(gen => gen.gender === \"female\");\r\n        setItems(female)\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            <Table striped bordered hover variant=\"dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th><Button variant=\"secondary\" size=\"lg\" onClick={handleFirstChange} active block>\r\n                            ID\r\n                            </Button>{' '}\r\n                        </th>\r\n                        <th><Button variant=\"secondary\" size=\"lg\" onClick={handleFirstChange} active block>\r\n                            Sort by First Name\r\n                            </Button>{' '}\r\n                        </th>\r\n                        <th><Button variant=\"secondary\" size=\"lg\" onClick={handleLastChange} active block>\r\n                            Sort by Last Name\r\n                            </Button>{' '}\r\n                        </th>\r\n                        <th><Button variant=\"secondary\" size=\"lg\" onClick={handleFirstChange} active block>\r\n                            Location\r\n                            </Button>{' '}\r\n                        </th>\r\n                        <th><Button variant=\"secondary\" size=\"sm\" onClick={handleMaleChange} active block>\r\n                            Filter by Male\r\n                            </Button>{' '}\r\n                            <Button variant=\"secondary\" size=\"sm\" onClick={handleFemaleChange} active block>\r\n                            Filter by Female\r\n                            </Button>{' '}\r\n                        </th>\r\n                        <th><Button variant=\"secondary\" size=\"lg\" onClick={handleAgeChange} active block>\r\n                            Sort by Age\r\n                            </Button>{' '\r\n                        }</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items.map(item => (\r\n                        <tr key={item.length}>\r\n                            <td><img src={item.picture.thumbnail} alt=\"Images of Employees\"></img></td>\r\n                            <td>{item.name.first}</td>\r\n                            <td>{item.name.last}</td>\r\n                            <td>{item.location.city}, {item.location.state} </td>\r\n                            <td>{item.gender}</td>\r\n                            <td>{item.dob.age}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Employee;","import React from 'react';\nimport './App.css';\nimport Jumbo from './Components/Jumbo';\nimport Employee from './Components/Employee';\n\nfunction App() {\n  return (<>\n    <Jumbo />\n    <Employee />\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}